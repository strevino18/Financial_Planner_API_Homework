{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Unit 5 - Financial Planning\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Initial imports.\n",
    "import os\n",
    "import requests\n",
    "import pandas as pd\n",
    "from dotenv import load_dotenv\n",
    "import alpaca_trade_api as tradeapi\n",
    "from MCForecastTools import MCSimulation\n",
    "import json\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Loading .env enviroment variables.\n",
    "load_dotenv()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 1 - Personal Finance Planner"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Collect Crypto Prices Using the `requests` Library"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Setting current amount of crypto assets.\n",
    "my_btc = 1.2\n",
    "my_eth = 5.3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Crypto API URLs\n",
    "btc_url = \"https://api.alternative.me/v2/ticker/Bitcoin/?convert=CAD\"\n",
    "eth_url = \"https://api.alternative.me/v2/ticker/Ethereum/?convert=CAD\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Adding format specifier to request url.\n",
    "btc_url = btc_url + \"?format=json\"\n",
    "eth_url = eth_url + \"?format=json\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "b'{\\n\\t\"data\": {\\n\\t\\t\"1\": {\\n\\t\\t\\t\"id\": 1,\\n\\t\\t\\t\"name\": \"Bitcoin\",\\n\\t\\t\\t\"symbol\": \"BTC\",\\n\\t\\t\\t\"website_slug\": \"bitcoin\",\\n\\t\\t\\t\"rank\": 1,\\n\\t\\t\\t\"circulating_supply\": 18724212,\\n\\t\\t\\t\"total_supply\": 18724212,\\n\\t\\t\\t\"max_supply\": 21000000,\\n\\t\\t\\t\"quotes\": {\\n\\t\\t\\t\\t\"USD\": {\\n\\t\\t\\t\\t\\t\"price\": 36538.0000000000000000,\\n\\t\\t\\t\\t\\t\"volume_24h\": 32759394972,\\n\\t\\t\\t\\t\\t\"market_cap\": 683142192874,\\n\\t\\t\\t\\t\\t\"percentage_change_1h\": 1.0648826166049800,\\n\\t\\t\\t\\t\\t\"percentage_change_24h\": -0.8775663646806440,\\n\\t\\t\\t\\t\\t\"percentage_change_7d\": -4.3765396021292200,\\n\\t\\t\\t\\t\\t\"percent_change_1h\": 1.0648826166049800,\\n\\t\\t\\t\\t\\t\"percent_change_24h\": -0.8775663646806440,\\n\\t\\t\\t\\t\\t\"percent_change_7d\": -4.3765396021292200\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\t\"last_updated\": 1622601878\\n\\t\\t}\\n\\t},\\n\\t\"metadata\": {\\n\\t\\t\"timestamp\": 1622601878,\\n\\t\\t\"num_cryptocurrencies\": 1296,\\n\\t\\t\"error\": null\\n\\t}\\n}'\n"
     ]
    }
   ],
   "source": [
    "# Fetching current BTC price.\n",
    "current_btc_price = requests.get(btc_url)\n",
    "current_btc_content = current_btc_price.content\n",
    "print(current_btc_content)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{\n",
      "    \"data\": {\n",
      "        \"1\": {\n",
      "            \"id\": 1,\n",
      "            \"name\": \"Bitcoin\",\n",
      "            \"symbol\": \"BTC\",\n",
      "            \"website_slug\": \"bitcoin\",\n",
      "            \"rank\": 1,\n",
      "            \"circulating_supply\": 18724212,\n",
      "            \"total_supply\": 18724212,\n",
      "            \"max_supply\": 21000000,\n",
      "            \"quotes\": {\n",
      "                \"USD\": {\n",
      "                    \"price\": 36538.0,\n",
      "                    \"volume_24h\": 32759394972,\n",
      "                    \"market_cap\": 683142192874,\n",
      "                    \"percentage_change_1h\": 1.06488261660498,\n",
      "                    \"percentage_change_24h\": -0.877566364680644,\n",
      "                    \"percentage_change_7d\": -4.37653960212922,\n",
      "                    \"percent_change_1h\": 1.06488261660498,\n",
      "                    \"percent_change_24h\": -0.877566364680644,\n",
      "                    \"percent_change_7d\": -4.37653960212922\n",
      "                }\n",
      "            },\n",
      "            \"last_updated\": 1622601878\n",
      "        }\n",
      "    },\n",
      "    \"metadata\": {\n",
      "        \"timestamp\": 1622601878,\n",
      "        \"num_cryptocurrencies\": 1296,\n",
      "        \"error\": null\n",
      "    }\n",
      "}\n"
     ]
    }
   ],
   "source": [
    "# Formatting BTC Price as json.\n",
    "btc_json = current_btc_price.json()\n",
    "print(json.dumps(btc_json, indent=4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "b'{\\n\\t\"data\": {\\n\\t\\t\"1027\": {\\n\\t\\t\\t\"id\": 1027,\\n\\t\\t\\t\"name\": \"Ethereum\",\\n\\t\\t\\t\"symbol\": \"ETH\",\\n\\t\\t\\t\"website_slug\": \"ethereum\",\\n\\t\\t\\t\"rank\": 2,\\n\\t\\t\\t\"circulating_supply\": 116120232,\\n\\t\\t\\t\"total_supply\": 116120232,\\n\\t\\t\\t\"max_supply\": 0,\\n\\t\\t\\t\"quotes\": {\\n\\t\\t\\t\\t\"USD\": {\\n\\t\\t\\t\\t\\t\"price\": 2617.6500000000000000,\\n\\t\\t\\t\\t\\t\"volume_24h\": 38626876384,\\n\\t\\t\\t\\t\\t\"market_cap\": 303048547654,\\n\\t\\t\\t\\t\\t\"percentage_change_1h\": 1.5527248654809900,\\n\\t\\t\\t\\t\\t\"percentage_change_24h\": -0.8659379417299780,\\n\\t\\t\\t\\t\\t\"percentage_change_7d\": -2.8873911749485600,\\n\\t\\t\\t\\t\\t\"percent_change_1h\": 1.5527248654809900,\\n\\t\\t\\t\\t\\t\"percent_change_24h\": -0.8659379417299780,\\n\\t\\t\\t\\t\\t\"percent_change_7d\": -2.8873911749485600\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\t\"last_updated\": 1622601858\\n\\t\\t}\\n\\t},\\n\\t\"metadata\": {\\n\\t\\t\"timestamp\": 1622601858,\\n\\t\\t\"num_cryptocurrencies\": 1296,\\n\\t\\t\"error\": null\\n\\t}\\n}'\n"
     ]
    }
   ],
   "source": [
    "# Fetching current ETH price.\n",
    "current_eth_price = requests.get(eth_url)\n",
    "current_eth_content = current_eth_price.content\n",
    "print(current_eth_content)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{\n",
      "    \"data\": {\n",
      "        \"1027\": {\n",
      "            \"id\": 1027,\n",
      "            \"name\": \"Ethereum\",\n",
      "            \"symbol\": \"ETH\",\n",
      "            \"website_slug\": \"ethereum\",\n",
      "            \"rank\": 2,\n",
      "            \"circulating_supply\": 116120232,\n",
      "            \"total_supply\": 116120232,\n",
      "            \"max_supply\": 0,\n",
      "            \"quotes\": {\n",
      "                \"USD\": {\n",
      "                    \"price\": 2617.65,\n",
      "                    \"volume_24h\": 38626876384,\n",
      "                    \"market_cap\": 303048547654,\n",
      "                    \"percentage_change_1h\": 1.55272486548099,\n",
      "                    \"percentage_change_24h\": -0.865937941729978,\n",
      "                    \"percentage_change_7d\": -2.88739117494856,\n",
      "                    \"percent_change_1h\": 1.55272486548099,\n",
      "                    \"percent_change_24h\": -0.865937941729978,\n",
      "                    \"percent_change_7d\": -2.88739117494856\n",
      "                }\n",
      "            },\n",
      "            \"last_updated\": 1622601858\n",
      "        }\n",
      "    },\n",
      "    \"metadata\": {\n",
      "        \"timestamp\": 1622601858,\n",
      "        \"num_cryptocurrencies\": 1296,\n",
      "        \"error\": null\n",
      "    }\n",
      "}\n"
     ]
    }
   ],
   "source": [
    "# Formatting ETH Price as json.\n",
    "eth_json = current_eth_price.json()\n",
    "print(json.dumps(eth_json, indent=4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The current value of your 1.2 BTC is $36538.00\n",
      "The current value of your 5.3 ETH is $2617.65\n"
     ]
    }
   ],
   "source": [
    "# Computing current value of my crpto.\n",
    "my_btc_value = btc_json['data']['1']['quotes']['USD']['price']\n",
    "my_eth_value = eth_json['data']['1027']['quotes']['USD']['price']\n",
    "\n",
    "# Printting current crypto wallet balance.\n",
    "print(f\"The current value of your {my_btc} BTC is ${my_btc_value:0.2f}\")\n",
    "print(f\"The current value of your {my_eth} ETH is ${my_eth_value:0.2f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Collect Investments Data Using Alpaca: `SPY` (stocks) and `AGG` (bonds)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Setting current amount of shares.\n",
    "my_agg = 200\n",
    "my_spy = 50"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Setting Alpaca API key and secret.\n",
    "alpaca_api_key = os.getenv(\"ALPACA_API_KEY\")\n",
    "alpaca_secret_key = os.getenv(\"ALPACA_SECRET_KEY\")\n",
    "\n",
    "# Creating the Alpaca API object.\n",
    "alpaca = tradeapi.REST(\n",
    "    alpaca_api_key,\n",
    "    alpaca_secret_key,\n",
    "    api_version=\"v2\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"5\" halign=\"left\">AGG</th>\n",
       "      <th colspan=\"5\" halign=\"left\">SPY</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>time</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2021-06-01 00:00:00-04:00</th>\n",
       "      <td>114.4</td>\n",
       "      <td>114.4</td>\n",
       "      <td>114.164</td>\n",
       "      <td>114.34</td>\n",
       "      <td>5655159</td>\n",
       "      <td>422.57</td>\n",
       "      <td>422.72</td>\n",
       "      <td>419.2</td>\n",
       "      <td>419.63</td>\n",
       "      <td>47607950</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             AGG                                      SPY  \\\n",
       "                            open   high      low   close   volume    open   \n",
       "time                                                                        \n",
       "2021-06-01 00:00:00-04:00  114.4  114.4  114.164  114.34  5655159  422.57   \n",
       "\n",
       "                                                            \n",
       "                             high    low   close    volume  \n",
       "time                                                        \n",
       "2021-06-01 00:00:00-04:00  422.72  419.2  419.63  47607950  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Formating current date as ISO format.\n",
    "today = pd.Timestamp(\"2021-06-01\", tz=\"America/Chicago\").isoformat()\n",
    "\n",
    "# Setting the tickers\n",
    "tickers = [\"AGG\", \"SPY\"]\n",
    "\n",
    "# Setting timeframe to '1D' for Alpaca API.\n",
    "timeframe = \"1D\"\n",
    "\n",
    "# Getting current closing prices for SPY and AGG.\n",
    "df_portfolio = alpaca.get_barset(\n",
    "    tickers,\n",
    "    timeframe,\n",
    "    start = today,\n",
    "    end = today\n",
    ").df\n",
    "\n",
    "# Previewing DataFrame.\n",
    "df_portfolio"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Current AGG closing price: $114.34\n",
      "Current SPY closing price: $419.63\n"
     ]
    }
   ],
   "source": [
    "# Picking AGG and SPY close prices.\n",
    "agg_close_price = df_portfolio[\"AGG\"][\"close\"].item()\n",
    "spy_close_price = df_portfolio[\"SPY\"][\"close\"].item()\n",
    "\n",
    "# Printing AGG and SPY close prices.\n",
    "print(f\"Current AGG closing price: ${agg_close_price}\")\n",
    "print(f\"Current SPY closing price: ${spy_close_price}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The current value of your 200 AGG shares is $22868.00\n",
      "The current value of your 50 SPY shares is $20981.50\n"
     ]
    }
   ],
   "source": [
    "# Computing the current value of shares.\n",
    "my_agg_value = agg_close_price * my_agg\n",
    "my_spy_value = spy_close_price * my_spy\n",
    "\n",
    "# Print current value of share.\n",
    "print(f\"The current value of your {my_agg} AGG shares is ${my_agg_value:0.2f}\")\n",
    "print(f\"The current value of your {my_spy} SPY shares is ${my_spy_value:0.2f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Savings Health Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>amount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>crypto</th>\n",
       "      <td>39155.65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>shares</th>\n",
       "      <td>43849.50</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          amount\n",
       "crypto  39155.65\n",
       "shares  43849.50"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Setting monthly household income.\n",
    "monthly_income = 12000\n",
    "\n",
    "# Setting Crypto and Share Amounts.\n",
    "amount_df = {\n",
    "    \"amount\": [my_btc_value + my_eth_value, my_spy_value + my_agg_value]\n",
    "}\n",
    "\n",
    "# Setting Assets.\n",
    "assets = [\"crypto\",\"shares\"]\n",
    "\n",
    "# Creating savings DataFrame.\n",
    "df_savings = pd.DataFrame(amount_df, index = assets)\n",
    "\n",
    "# Displaying savings DataFrame.\n",
    "display(df_savings)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotting savings pie chart.\n",
    "df_savings.plot.pie(y = \"amount\", title = \"Composition of Personal Savings\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Congratulations! You have enough money in your emergency fund.\n"
     ]
    }
   ],
   "source": [
    "# Setting ideal emergency fund.\n",
    "emergency_fund = monthly_income * 3\n",
    "\n",
    "# Calculating total amount of savings.\n",
    "total_savings = df_savings.sum().item()\n",
    "\n",
    "# Validating saving health.\n",
    "if total_savings > emergency_fund:\n",
    "    print(\"Congratulations! You have enough money in your emergency fund.\")\n",
    "elif total_savings == emergency_fund:\n",
    "    print(\"Congradulations! You have reached your financial goal.\")\n",
    "else:\n",
    "    print(f\"You are {round(emergency_fund - total_savings, 2)} away from reaching your goal\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 2 - Retirement Planning\n",
    "\n",
    "### Monte Carlo Simulation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Setting start and end dates of five years back from today.\n",
    "# Sample results may vary from the solution based on the time frame chosen\n",
    "start_date = pd.Timestamp('2016-06-01', tz='America/New_York').isoformat()\n",
    "end_date = pd.Timestamp('2021-06-01', tz='America/New_York').isoformat()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"5\" halign=\"left\">AGG</th>\n",
       "      <th colspan=\"5\" halign=\"left\">SPY</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>time</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2017-06-12 00:00:00-04:00</th>\n",
       "      <td>109.51</td>\n",
       "      <td>109.6958</td>\n",
       "      <td>109.47</td>\n",
       "      <td>109.555</td>\n",
       "      <td>1184601</td>\n",
       "      <td>243.14</td>\n",
       "      <td>243.42</td>\n",
       "      <td>242.3800</td>\n",
       "      <td>243.34</td>\n",
       "      <td>57096569</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-06-13 00:00:00-04:00</th>\n",
       "      <td>109.43</td>\n",
       "      <td>109.6000</td>\n",
       "      <td>109.43</td>\n",
       "      <td>109.580</td>\n",
       "      <td>1324388</td>\n",
       "      <td>243.99</td>\n",
       "      <td>244.61</td>\n",
       "      <td>243.5799</td>\n",
       "      <td>244.52</td>\n",
       "      <td>43470532</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-06-14 00:00:00-04:00</th>\n",
       "      <td>110.00</td>\n",
       "      <td>110.1800</td>\n",
       "      <td>109.85</td>\n",
       "      <td>109.950</td>\n",
       "      <td>2304819</td>\n",
       "      <td>244.86</td>\n",
       "      <td>244.87</td>\n",
       "      <td>243.2900</td>\n",
       "      <td>244.26</td>\n",
       "      <td>55098826</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-06-15 00:00:00-04:00</th>\n",
       "      <td>109.90</td>\n",
       "      <td>109.9000</td>\n",
       "      <td>109.78</td>\n",
       "      <td>109.870</td>\n",
       "      <td>1938779</td>\n",
       "      <td>242.68</td>\n",
       "      <td>243.91</td>\n",
       "      <td>242.3600</td>\n",
       "      <td>243.79</td>\n",
       "      <td>51523068</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-06-16 00:00:00-04:00</th>\n",
       "      <td>109.86</td>\n",
       "      <td>109.9700</td>\n",
       "      <td>109.85</td>\n",
       "      <td>109.945</td>\n",
       "      <td>1709677</td>\n",
       "      <td>242.77</td>\n",
       "      <td>242.83</td>\n",
       "      <td>241.6337</td>\n",
       "      <td>242.63</td>\n",
       "      <td>48998243</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              AGG                                         SPY  \\\n",
       "                             open      high     low    close   volume    open   \n",
       "time                                                                            \n",
       "2017-06-12 00:00:00-04:00  109.51  109.6958  109.47  109.555  1184601  243.14   \n",
       "2017-06-13 00:00:00-04:00  109.43  109.6000  109.43  109.580  1324388  243.99   \n",
       "2017-06-14 00:00:00-04:00  110.00  110.1800  109.85  109.950  2304819  244.86   \n",
       "2017-06-15 00:00:00-04:00  109.90  109.9000  109.78  109.870  1938779  242.68   \n",
       "2017-06-16 00:00:00-04:00  109.86  109.9700  109.85  109.945  1709677  242.77   \n",
       "\n",
       "                                                               \n",
       "                             high       low   close    volume  \n",
       "time                                                           \n",
       "2017-06-12 00:00:00-04:00  243.42  242.3800  243.34  57096569  \n",
       "2017-06-13 00:00:00-04:00  244.61  243.5799  244.52  43470532  \n",
       "2017-06-14 00:00:00-04:00  244.87  243.2900  244.26  55098826  \n",
       "2017-06-15 00:00:00-04:00  243.91  242.3600  243.79  51523068  \n",
       "2017-06-16 00:00:00-04:00  242.83  241.6337  242.63  48998243  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Setting the AGG and SPY tickers.\n",
    "ticker = [\"AGG\",\"SPY\"]\n",
    "\n",
    "# Setting timeframe to '1D'.\n",
    "timeframe = \"1D\"\n",
    "\n",
    "# Getting 5 years' worth of historical data for SPY and AGG.\n",
    "df_stock_data = alpaca.get_barset(\n",
    "    ticker,\n",
    "    timeframe,\n",
    "    start=start_date,\n",
    "    end=end_date,\n",
    "    limit=1000,\n",
    ").df\n",
    "\n",
    "# Displaying sample data.\n",
    "df_stock_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Configuring a Monte Carlo simulation to forecast 30 years cumulative returns.\n",
    "MC_thirty_year = MCSimulation(\n",
    "    portfolio_data = df_stock_data,\n",
    "    weights = [.40,.60],\n",
    "    num_simulation = 500,\n",
    "    num_trading_days = 252*30\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"6\" halign=\"left\">AGG</th>\n",
       "      <th colspan=\"6\" halign=\"left\">SPY</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "      <th>daily_return</th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "      <th>daily_return</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>time</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2017-06-12 00:00:00-04:00</th>\n",
       "      <td>109.51</td>\n",
       "      <td>109.6958</td>\n",
       "      <td>109.47</td>\n",
       "      <td>109.555</td>\n",
       "      <td>1184601</td>\n",
       "      <td>NaN</td>\n",
       "      <td>243.14</td>\n",
       "      <td>243.42</td>\n",
       "      <td>242.3800</td>\n",
       "      <td>243.34</td>\n",
       "      <td>57096569</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-06-13 00:00:00-04:00</th>\n",
       "      <td>109.43</td>\n",
       "      <td>109.6000</td>\n",
       "      <td>109.43</td>\n",
       "      <td>109.580</td>\n",
       "      <td>1324388</td>\n",
       "      <td>0.000228</td>\n",
       "      <td>243.99</td>\n",
       "      <td>244.61</td>\n",
       "      <td>243.5799</td>\n",
       "      <td>244.52</td>\n",
       "      <td>43470532</td>\n",
       "      <td>0.004849</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-06-14 00:00:00-04:00</th>\n",
       "      <td>110.00</td>\n",
       "      <td>110.1800</td>\n",
       "      <td>109.85</td>\n",
       "      <td>109.950</td>\n",
       "      <td>2304819</td>\n",
       "      <td>0.003377</td>\n",
       "      <td>244.86</td>\n",
       "      <td>244.87</td>\n",
       "      <td>243.2900</td>\n",
       "      <td>244.26</td>\n",
       "      <td>55098826</td>\n",
       "      <td>-0.001063</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-06-15 00:00:00-04:00</th>\n",
       "      <td>109.90</td>\n",
       "      <td>109.9000</td>\n",
       "      <td>109.78</td>\n",
       "      <td>109.870</td>\n",
       "      <td>1938779</td>\n",
       "      <td>-0.000728</td>\n",
       "      <td>242.68</td>\n",
       "      <td>243.91</td>\n",
       "      <td>242.3600</td>\n",
       "      <td>243.79</td>\n",
       "      <td>51523068</td>\n",
       "      <td>-0.001924</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-06-16 00:00:00-04:00</th>\n",
       "      <td>109.86</td>\n",
       "      <td>109.9700</td>\n",
       "      <td>109.85</td>\n",
       "      <td>109.945</td>\n",
       "      <td>1709677</td>\n",
       "      <td>0.000683</td>\n",
       "      <td>242.77</td>\n",
       "      <td>242.83</td>\n",
       "      <td>241.6337</td>\n",
       "      <td>242.63</td>\n",
       "      <td>48998243</td>\n",
       "      <td>-0.004758</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              AGG                                      \\\n",
       "                             open      high     low    close   volume   \n",
       "time                                                                    \n",
       "2017-06-12 00:00:00-04:00  109.51  109.6958  109.47  109.555  1184601   \n",
       "2017-06-13 00:00:00-04:00  109.43  109.6000  109.43  109.580  1324388   \n",
       "2017-06-14 00:00:00-04:00  110.00  110.1800  109.85  109.950  2304819   \n",
       "2017-06-15 00:00:00-04:00  109.90  109.9000  109.78  109.870  1938779   \n",
       "2017-06-16 00:00:00-04:00  109.86  109.9700  109.85  109.945  1709677   \n",
       "\n",
       "                                           SPY                            \\\n",
       "                          daily_return    open    high       low   close   \n",
       "time                                                                       \n",
       "2017-06-12 00:00:00-04:00          NaN  243.14  243.42  242.3800  243.34   \n",
       "2017-06-13 00:00:00-04:00     0.000228  243.99  244.61  243.5799  244.52   \n",
       "2017-06-14 00:00:00-04:00     0.003377  244.86  244.87  243.2900  244.26   \n",
       "2017-06-15 00:00:00-04:00    -0.000728  242.68  243.91  242.3600  243.79   \n",
       "2017-06-16 00:00:00-04:00     0.000683  242.77  242.83  241.6337  242.63   \n",
       "\n",
       "                                                  \n",
       "                             volume daily_return  \n",
       "time                                              \n",
       "2017-06-12 00:00:00-04:00  57096569          NaN  \n",
       "2017-06-13 00:00:00-04:00  43470532     0.004849  \n",
       "2017-06-14 00:00:00-04:00  55098826    -0.001063  \n",
       "2017-06-15 00:00:00-04:00  51523068    -0.001924  \n",
       "2017-06-16 00:00:00-04:00  48998243    -0.004758  "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Printing the simulation input data.\n",
    "MC_thirty_year.portfolio_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running Monte Carlo simulation number 0.\n",
      "Running Monte Carlo simulation number 10.\n",
      "Running Monte Carlo simulation number 20.\n",
      "Running Monte Carlo simulation number 30.\n",
      "Running Monte Carlo simulation number 40.\n",
      "Running Monte Carlo simulation number 50.\n",
      "Running Monte Carlo simulation number 60.\n",
      "Running Monte Carlo simulation number 70.\n",
      "Running Monte Carlo simulation number 80.\n",
      "Running Monte Carlo simulation number 90.\n",
      "Running Monte Carlo simulation number 100.\n",
      "Running Monte Carlo simulation number 110.\n",
      "Running Monte Carlo simulation number 120.\n",
      "Running Monte Carlo simulation number 130.\n",
      "Running Monte Carlo simulation number 140.\n",
      "Running Monte Carlo simulation number 150.\n",
      "Running Monte Carlo simulation number 160.\n",
      "Running Monte Carlo simulation number 170.\n",
      "Running Monte Carlo simulation number 180.\n",
      "Running Monte Carlo simulation number 190.\n",
      "Running Monte Carlo simulation number 200.\n",
      "Running Monte Carlo simulation number 210.\n",
      "Running Monte Carlo simulation number 220.\n",
      "Running Monte Carlo simulation number 230.\n",
      "Running Monte Carlo simulation number 240.\n",
      "Running Monte Carlo simulation number 250.\n",
      "Running Monte Carlo simulation number 260.\n",
      "Running Monte Carlo simulation number 270.\n",
      "Running Monte Carlo simulation number 280.\n",
      "Running Monte Carlo simulation number 290.\n",
      "Running Monte Carlo simulation number 300.\n",
      "Running Monte Carlo simulation number 310.\n",
      "Running Monte Carlo simulation number 320.\n",
      "Running Monte Carlo simulation number 330.\n",
      "Running Monte Carlo simulation number 340.\n",
      "Running Monte Carlo simulation number 350.\n",
      "Running Monte Carlo simulation number 360.\n",
      "Running Monte Carlo simulation number 370.\n",
      "Running Monte Carlo simulation number 380.\n",
      "Running Monte Carlo simulation number 390.\n",
      "Running Monte Carlo simulation number 400.\n",
      "Running Monte Carlo simulation number 410.\n",
      "Running Monte Carlo simulation number 420.\n",
      "Running Monte Carlo simulation number 430.\n",
      "Running Monte Carlo simulation number 440.\n",
      "Running Monte Carlo simulation number 450.\n",
      "Running Monte Carlo simulation number 460.\n",
      "Running Monte Carlo simulation number 470.\n",
      "Running Monte Carlo simulation number 480.\n",
      "Running Monte Carlo simulation number 490.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>490</th>\n",
       "      <th>491</th>\n",
       "      <th>492</th>\n",
       "      <th>493</th>\n",
       "      <th>494</th>\n",
       "      <th>495</th>\n",
       "      <th>496</th>\n",
       "      <th>497</th>\n",
       "      <th>498</th>\n",
       "      <th>499</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.005579</td>\n",
       "      <td>0.995016</td>\n",
       "      <td>0.978000</td>\n",
       "      <td>0.993384</td>\n",
       "      <td>1.004517</td>\n",
       "      <td>1.000025</td>\n",
       "      <td>1.004531</td>\n",
       "      <td>1.002718</td>\n",
       "      <td>0.997199</td>\n",
       "      <td>1.002717</td>\n",
       "      <td>...</td>\n",
       "      <td>1.007435</td>\n",
       "      <td>0.997457</td>\n",
       "      <td>1.000852</td>\n",
       "      <td>0.996319</td>\n",
       "      <td>0.996465</td>\n",
       "      <td>1.009457</td>\n",
       "      <td>0.997980</td>\n",
       "      <td>0.976072</td>\n",
       "      <td>0.991882</td>\n",
       "      <td>0.998667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.013319</td>\n",
       "      <td>0.997547</td>\n",
       "      <td>0.976446</td>\n",
       "      <td>0.999910</td>\n",
       "      <td>1.013858</td>\n",
       "      <td>0.999165</td>\n",
       "      <td>0.998872</td>\n",
       "      <td>1.012677</td>\n",
       "      <td>0.999520</td>\n",
       "      <td>0.995969</td>\n",
       "      <td>...</td>\n",
       "      <td>0.993652</td>\n",
       "      <td>1.001653</td>\n",
       "      <td>1.001995</td>\n",
       "      <td>0.994578</td>\n",
       "      <td>0.987629</td>\n",
       "      <td>1.004145</td>\n",
       "      <td>1.000196</td>\n",
       "      <td>0.978171</td>\n",
       "      <td>0.982180</td>\n",
       "      <td>0.984413</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.012589</td>\n",
       "      <td>0.994015</td>\n",
       "      <td>0.978342</td>\n",
       "      <td>0.996898</td>\n",
       "      <td>1.016695</td>\n",
       "      <td>1.003313</td>\n",
       "      <td>0.991692</td>\n",
       "      <td>1.015980</td>\n",
       "      <td>0.996656</td>\n",
       "      <td>0.995448</td>\n",
       "      <td>...</td>\n",
       "      <td>0.985625</td>\n",
       "      <td>1.001610</td>\n",
       "      <td>1.002899</td>\n",
       "      <td>0.989908</td>\n",
       "      <td>0.980205</td>\n",
       "      <td>0.994880</td>\n",
       "      <td>1.005279</td>\n",
       "      <td>0.979562</td>\n",
       "      <td>0.982443</td>\n",
       "      <td>0.969842</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.014949</td>\n",
       "      <td>0.991588</td>\n",
       "      <td>0.981736</td>\n",
       "      <td>0.995958</td>\n",
       "      <td>1.017271</td>\n",
       "      <td>0.990610</td>\n",
       "      <td>0.983254</td>\n",
       "      <td>1.020156</td>\n",
       "      <td>1.000544</td>\n",
       "      <td>0.989525</td>\n",
       "      <td>...</td>\n",
       "      <td>0.978741</td>\n",
       "      <td>1.000312</td>\n",
       "      <td>1.002464</td>\n",
       "      <td>0.991513</td>\n",
       "      <td>0.990997</td>\n",
       "      <td>0.996220</td>\n",
       "      <td>1.010676</td>\n",
       "      <td>0.988470</td>\n",
       "      <td>0.982082</td>\n",
       "      <td>0.959770</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7556</th>\n",
       "      <td>12.766108</td>\n",
       "      <td>15.953482</td>\n",
       "      <td>18.811596</td>\n",
       "      <td>65.307278</td>\n",
       "      <td>25.936728</td>\n",
       "      <td>12.077664</td>\n",
       "      <td>5.027948</td>\n",
       "      <td>12.020088</td>\n",
       "      <td>14.216199</td>\n",
       "      <td>26.463890</td>\n",
       "      <td>...</td>\n",
       "      <td>10.645105</td>\n",
       "      <td>24.436013</td>\n",
       "      <td>21.371734</td>\n",
       "      <td>18.068970</td>\n",
       "      <td>17.356906</td>\n",
       "      <td>19.851334</td>\n",
       "      <td>33.457300</td>\n",
       "      <td>26.270997</td>\n",
       "      <td>6.907660</td>\n",
       "      <td>23.950044</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7557</th>\n",
       "      <td>12.569163</td>\n",
       "      <td>15.954351</td>\n",
       "      <td>18.844804</td>\n",
       "      <td>64.994447</td>\n",
       "      <td>25.917761</td>\n",
       "      <td>12.179923</td>\n",
       "      <td>5.119208</td>\n",
       "      <td>12.150695</td>\n",
       "      <td>14.173352</td>\n",
       "      <td>26.508636</td>\n",
       "      <td>...</td>\n",
       "      <td>10.626490</td>\n",
       "      <td>24.236126</td>\n",
       "      <td>21.514335</td>\n",
       "      <td>17.922702</td>\n",
       "      <td>17.446574</td>\n",
       "      <td>19.775911</td>\n",
       "      <td>33.565751</td>\n",
       "      <td>26.336273</td>\n",
       "      <td>6.913614</td>\n",
       "      <td>23.995673</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7558</th>\n",
       "      <td>12.613604</td>\n",
       "      <td>15.947776</td>\n",
       "      <td>18.666120</td>\n",
       "      <td>65.459921</td>\n",
       "      <td>26.044254</td>\n",
       "      <td>12.048609</td>\n",
       "      <td>5.152496</td>\n",
       "      <td>12.212788</td>\n",
       "      <td>14.217301</td>\n",
       "      <td>26.529137</td>\n",
       "      <td>...</td>\n",
       "      <td>10.678310</td>\n",
       "      <td>24.352626</td>\n",
       "      <td>21.455255</td>\n",
       "      <td>17.655186</td>\n",
       "      <td>17.376377</td>\n",
       "      <td>19.546239</td>\n",
       "      <td>33.663140</td>\n",
       "      <td>26.205695</td>\n",
       "      <td>6.885055</td>\n",
       "      <td>23.797520</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7559</th>\n",
       "      <td>12.437629</td>\n",
       "      <td>16.075564</td>\n",
       "      <td>18.619783</td>\n",
       "      <td>64.776953</td>\n",
       "      <td>25.877066</td>\n",
       "      <td>12.015717</td>\n",
       "      <td>5.199275</td>\n",
       "      <td>12.333939</td>\n",
       "      <td>14.084882</td>\n",
       "      <td>26.261697</td>\n",
       "      <td>...</td>\n",
       "      <td>10.638071</td>\n",
       "      <td>24.388498</td>\n",
       "      <td>21.183037</td>\n",
       "      <td>17.553651</td>\n",
       "      <td>17.396382</td>\n",
       "      <td>19.403624</td>\n",
       "      <td>33.658083</td>\n",
       "      <td>26.474027</td>\n",
       "      <td>6.859544</td>\n",
       "      <td>23.852516</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7560</th>\n",
       "      <td>12.557705</td>\n",
       "      <td>16.192711</td>\n",
       "      <td>18.649854</td>\n",
       "      <td>64.580447</td>\n",
       "      <td>25.805292</td>\n",
       "      <td>11.987638</td>\n",
       "      <td>5.202496</td>\n",
       "      <td>12.399429</td>\n",
       "      <td>14.109461</td>\n",
       "      <td>26.266852</td>\n",
       "      <td>...</td>\n",
       "      <td>10.511545</td>\n",
       "      <td>24.250988</td>\n",
       "      <td>21.142577</td>\n",
       "      <td>17.621709</td>\n",
       "      <td>17.501838</td>\n",
       "      <td>19.406880</td>\n",
       "      <td>33.292829</td>\n",
       "      <td>26.568860</td>\n",
       "      <td>6.965142</td>\n",
       "      <td>24.017320</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7561 rows × 500 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            0          1          2          3          4          5    \\\n",
       "0      1.000000   1.000000   1.000000   1.000000   1.000000   1.000000   \n",
       "1      1.005579   0.995016   0.978000   0.993384   1.004517   1.000025   \n",
       "2      1.013319   0.997547   0.976446   0.999910   1.013858   0.999165   \n",
       "3      1.012589   0.994015   0.978342   0.996898   1.016695   1.003313   \n",
       "4      1.014949   0.991588   0.981736   0.995958   1.017271   0.990610   \n",
       "...         ...        ...        ...        ...        ...        ...   \n",
       "7556  12.766108  15.953482  18.811596  65.307278  25.936728  12.077664   \n",
       "7557  12.569163  15.954351  18.844804  64.994447  25.917761  12.179923   \n",
       "7558  12.613604  15.947776  18.666120  65.459921  26.044254  12.048609   \n",
       "7559  12.437629  16.075564  18.619783  64.776953  25.877066  12.015717   \n",
       "7560  12.557705  16.192711  18.649854  64.580447  25.805292  11.987638   \n",
       "\n",
       "           6          7          8          9    ...        490        491  \\\n",
       "0     1.000000   1.000000   1.000000   1.000000  ...   1.000000   1.000000   \n",
       "1     1.004531   1.002718   0.997199   1.002717  ...   1.007435   0.997457   \n",
       "2     0.998872   1.012677   0.999520   0.995969  ...   0.993652   1.001653   \n",
       "3     0.991692   1.015980   0.996656   0.995448  ...   0.985625   1.001610   \n",
       "4     0.983254   1.020156   1.000544   0.989525  ...   0.978741   1.000312   \n",
       "...        ...        ...        ...        ...  ...        ...        ...   \n",
       "7556  5.027948  12.020088  14.216199  26.463890  ...  10.645105  24.436013   \n",
       "7557  5.119208  12.150695  14.173352  26.508636  ...  10.626490  24.236126   \n",
       "7558  5.152496  12.212788  14.217301  26.529137  ...  10.678310  24.352626   \n",
       "7559  5.199275  12.333939  14.084882  26.261697  ...  10.638071  24.388498   \n",
       "7560  5.202496  12.399429  14.109461  26.266852  ...  10.511545  24.250988   \n",
       "\n",
       "            492        493        494        495        496        497  \\\n",
       "0      1.000000   1.000000   1.000000   1.000000   1.000000   1.000000   \n",
       "1      1.000852   0.996319   0.996465   1.009457   0.997980   0.976072   \n",
       "2      1.001995   0.994578   0.987629   1.004145   1.000196   0.978171   \n",
       "3      1.002899   0.989908   0.980205   0.994880   1.005279   0.979562   \n",
       "4      1.002464   0.991513   0.990997   0.996220   1.010676   0.988470   \n",
       "...         ...        ...        ...        ...        ...        ...   \n",
       "7556  21.371734  18.068970  17.356906  19.851334  33.457300  26.270997   \n",
       "7557  21.514335  17.922702  17.446574  19.775911  33.565751  26.336273   \n",
       "7558  21.455255  17.655186  17.376377  19.546239  33.663140  26.205695   \n",
       "7559  21.183037  17.553651  17.396382  19.403624  33.658083  26.474027   \n",
       "7560  21.142577  17.621709  17.501838  19.406880  33.292829  26.568860   \n",
       "\n",
       "           498        499  \n",
       "0     1.000000   1.000000  \n",
       "1     0.991882   0.998667  \n",
       "2     0.982180   0.984413  \n",
       "3     0.982443   0.969842  \n",
       "4     0.982082   0.959770  \n",
       "...        ...        ...  \n",
       "7556  6.907660  23.950044  \n",
       "7557  6.913614  23.995673  \n",
       "7558  6.885055  23.797520  \n",
       "7559  6.859544  23.852516  \n",
       "7560  6.965142  24.017320  \n",
       "\n",
       "[7561 rows x 500 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Running a Monte Carlo simulation to forecast 30 years cumulative returns.\n",
    "MC_thirty_year.calc_cumulative_return()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotting simulation outcomes.\n",
    "line_plot = MC_thirty_year.plot_simulation()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotting probability distribution and confidence intervals.\n",
    "dist_plot = MC_thirty_year.plot_distribution()\n",
    "\n",
    "# Saving the plot for future usage.\n",
    "dist_plot.get_figure().savefig('MC_thirty_year_dist_plot.png',bbox_inches='tight')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Retirement Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "count           500.000000\n",
      "mean             21.178838\n",
      "std              15.935027\n",
      "min               1.993903\n",
      "25%              11.310280\n",
      "50%              16.754894\n",
      "75%              25.315067\n",
      "max             126.450490\n",
      "95% CI Lower      4.624880\n",
      "95% CI Upper     64.666350\n",
      "Name: 7560, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Fetching summary statistics from the Monte Carlo simulation results.\n",
    "tbl = MC_thirty_year.summarize_cumulative_return()\n",
    "\n",
    "# Printting summary statistics.\n",
    "print(tbl)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Calculate the expected portfolio return at the 95% lower and upper confidence intervals based on a `$20,000` initial investment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There is a 95% chance that an initial investment of $20000 in the portfolio over the next 30 years will end within in the range of $92497.6 and $1293327.0\n"
     ]
    }
   ],
   "source": [
    "# Setting initial investment.\n",
    "initial_investment = 20000\n",
    "\n",
    "# Using the lower and upper `95%` confidence intervals to calculate the range of the possible outcomes of our $20,000.\n",
    "ci_lower = round(tbl[8] * initial_investment,2)\n",
    "ci_upper = round(tbl[9] * initial_investment,2)\n",
    "\n",
    "# Printing results.\n",
    "print(f\"There is a 95% chance that an initial investment of ${initial_investment} in the portfolio\"\n",
    "      f\" over the next 30 years will end within in the range of\"\n",
    "      f\" ${ci_lower} and ${ci_upper}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Calculate the expected portfolio return at the `95%` lower and upper confidence intervals based on a `50%` increase in the initial investment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There is a 95% chance that an initial investment of $30000.0 in the portfolio over the next 30 years will end within in the range of $138746.4 and $1939990.5\n"
     ]
    }
   ],
   "source": [
    "# Setting initial investment.\n",
    "initial_investment = 20000 * 1.5\n",
    "\n",
    "# Use the lower and upper `95%` confidence intervals to calculate the range of the possible outcomes of our $30,000\n",
    "ci_lower = round(tbl[8] * initial_investment,2)\n",
    "ci_upper = round(tbl[9] * initial_investment,2)\n",
    "\n",
    "# Print results\n",
    "print(f\"There is a 95% chance that an initial investment of ${initial_investment} in the portfolio\"\n",
    "      f\" over the next 30 years will end within in the range of\"\n",
    "      f\" ${ci_lower} and ${ci_upper}\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}